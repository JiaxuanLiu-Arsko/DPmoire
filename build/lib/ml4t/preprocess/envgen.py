import numpy as np
import os,sys,re

from .parameters import Parameters

class Envgen:
    latVec = [[],[]]
    elements = []
    kpgenerator = None
    originDir = None
    poscar = None
    potDir = None
    ENCUT = 0
    RCUT = 0

    def __init__(self, params:Parameters, kpgenerator=None):
        self.kpgenerator = kpgenerator
        self.originDir = params.originDir
        self.potDir = params.potDir
        self.RCUT = params.RCUT
        self.ENCUT = params.ENCUT
        self.elements = params.elements
        with open(self.originDir + "/POSCAR",'r') as f:
            self.poscar = f.read()
        if kpgenerator == None:
            self.kpgenerator = self.genks
        else:
            self.kpgenerator = kpgenerator

    def genAll(self, genDir:str, params:Parameters):
        for i in range(params.nSecs):
            for j in range(params.nSecs):
                outDir = genDir + "/" + str(i) + "_" + str(j)
                self.genEnv(outDir, params)

    def genPOTCAR(self, elements:list, outDir:str):
        potSTR = ""
        for element in elements:
            potSTR += self.potDir + "/" + element + "/POTCAR "
        os.system("cat " + potSTR + ">" + outDir + "/POTCAR")

    def genKPOINTS(self, kpoints:list, outDir:str):
        outfile = open(outDir + "/KPOINTS", "w")
        outfile.write("K point mesh generated by MLFF4TBM \n 0 \n Gamma\n")
        outfile.write(str(kpoints[0])+" "+str(kpoints[1])+" "+str(kpoints[2])+"\n")
        outfile.close()
    
    def genINCAR(self, outDir:str, params:Parameters, originDir:str):
        infile = open(originDir + "/INCAR", "r")
        outSTR = ""
        for lines in infile:
            if len(lines.split())<=0:
                continue
            if lines.split()[0] == "ENCUT":
                outSTR += "ENCUT = " + str(params.ENCUT*1.2) + "\n"
            elif lines.split()[0] == "ML_RCUT1":
                outSTR += "ML_RCUT1 = " + str(params.RCUT) + "\n"
            elif lines.split()[0] == "ML_RCUT2":
                outSTR += "ML_RCUT2 = " + str(params.RCUT) + "\n"
            elif lines.split()[0] == "LANGEVIN_GAMMA":
                outSTR += "LANGEVIN_GAMMA = "
                for i in range(len(params.elements)):
                    outSTR += "1 "
                outSTR += "\n"
            else:
                outSTR += lines
        infile.close()
        with open(outDir + "/INCAR", "w") as outfile:
            outfile.write(outSTR)
            outfile.close()

    def genEnv(self, outDir:str, params:Parameters):
        kpoints = self.kpgenerator(params.latVec)
        self.genPOTCAR(elements=params.elements, outDir=outDir)
        self.genKPOINTS(kpoints, outDir)
        self.genINCAR(outDir=outDir, params=params, originDir=params.originDir)

    def genks(self, latVec):
        kpoints = []
        for vec in latVec:
            len = np.sqrt(vec[0]*vec[0] + vec[1]*vec[1])
            kpoints.append(int(40/len))
        kpoints.append(1)
        return kpoints
