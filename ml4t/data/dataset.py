import numpy as np
import re

from ase import Atoms
from ase.io import write as asewrite
from ase.io.vasp import read_vasp_out
from ase.calculators.singlepoint import SinglePointCalculator

class Dataset:

    '''
    Dataset class to collect the AB_initio dataset generated by VASP_MLFF.
    '''

    nConfigs = 0
    data = {
        "positions":[],
        "forces":[],
        "cells":[],
        "symbols":[],
        "energies":[],
    }

    def __init__(self):
        pass

    def loadAll_AB(self, nSecs:int, includeDir:str, infileSTR:str="ML_ABN"):
        '''
        load all dataset from each stacking.
        '''
        for i in range(nSecs):
            for j in range(nSecs):
                self.loadDataset_AB(includeDir+"/"+str(i)+"_"+str(j)+"/"+infileSTR)

    def loadAll_OUTCAR(self, nSecs:int, freq, includeDir:str, infileSTR:str="OUTCAR"):
        '''
        load all dataset from each stacking.
        '''
        for i in range(nSecs):
            for j in range(nSecs):
                self.loadDataset_OUTCAR(includeDir+"/"+str(i)+"_"+str(j)+"/"+infileSTR, freq=freq)

    def startFromNPZ(self, infileSTR:str):
        if len(self.data["energies"])>0:
            print("WARNING: Erasing existing dataset!")
        self.data = np.load(infileSTR)

    def loadDataset_AB(self, infileSTR):
        '''
        load dataset from ML_AB file of VASP_MLFF module.
        '''
        infile = open(infileSTR)
        for i, lines in enumerate(infile):
            if i == 4:
                #read the number of structure in this file.
                self.nConfigs += int(lines.split()[0])                      
                break
        dataset = infile.read()
        infile.close()
        #cut the file into pieces
        structures = re.split("\n+\s*Configuration num.\s*\d+\n",dataset)  
        #pop out the header
        structures.pop(0)
        #handle each configs
        for structure in structures:

            para = re.split("=+\n",structure)
            ntype = int(para[2].split("\n")[2])
            nAtom = int(para[3].split("\n")[2])
            elem = []
            nelem = []

            #read elements and how many atoms in each element
            for lines in para[3].split("\n")[6:6+ntype]:
                elem.append(lines.split()[0])
                nelem.append(int(lines.split()[1]))

            #read lattice vectors of each cell
            latV = []
            for lines in para[5].split("\n")[2:5]:
                lat = []
                for str in lines.split():
                    lat.append(float(str))
                latV.append(lat)
            self.data["cells"].append(latV)

            #read position of each atom
            pos = []
            symbol = []
            k = 0
            for i, lines in enumerate(para[6].split("\n")[2:2+nAtom]):
                posP = []
                for str in lines.split():
                    posP.append(float(str))
                pos.append(posP)
                #and assign the element symbol to them.
                if(nelem[k]>0):
                    nelem[k] -= 1
                else:
                    k += 1
                symbol.append(elem[k])
            self.data["positions"].append(pos)
            self.data["symbols"].append(symbol)

            #read energy of each configuration
            self.data["energies"].append(float(para[7].split("\n")[2]))

            #read forces of each atom
            f = []
            for lines in para[8].split("\n")[2:2+nAtom]:
                fP = []
                for str in lines.split():
                    fP.append(float(str))
                f.append(fP)
            self.data["forces"].append(f)

    def loadDataset_OUTCAR(self, infileSTR, freq):
        outcarStructures = read_vasp_out(infileSTR, ":")
        print(len(outcarStructures))
        for i, structure in enumerate(outcarStructures):
            if i%freq != 0:
                continue
            self.data["positions"].append(structure.get_positions())
            self.data["forces"].append(structure.get_forces())
            self.data["symbols"].append(structure.get_chemical_symbols())
            self.data["cells"].append(structure.get_cell().array)
            self.data["energies"].append(structure.get_total_energy())

    def loadDataset_OUTCAR_old(self, infileSTR, freq):
        infile = open(infileSTR)
        dataset = infile.read()
        vrhfin = re.findall(r'VRHFIN\s*=[A-Za-z]+', dataset)
        elements = []
        for item in vrhfin:
            elements.append(item.split("=")[-1])
        
        ionPerType = re.search(r'ions per type\s*=(\s*\d+)+', dataset).group()
        nElement = []
        for item in ionPerType.split("=")[-1].split():
            nElement.append(int(item))

        lat = re.findall(r'A[1,2,3] = \(\s*(-*\d+\.\d+),\s*(-*\d+\.\d+),\s*(-*\d+\.\d+)\)', dataset)
        latVec = [[float(lat[dim][0]), float(lat[dim][1]), float(lat[dim][2])] for dim in range(3)]
        energies = re.findall(r'free  energy   TOTEN\s*=\s*(-*\d+\.\d+)\s*eV', dataset)
        structures = re.findall(r'POSITION\s+TOTAL-FORCE.*?\n\s+(-{0,1}\d+\.\d+\s+-{0,1}\d+\.\d+\s+-{0,1}\d+\.\d+.*?)\n\s+(?=-{3,})', dataset, re.DOTALL)
        for i,structure in enumerate(structures):
            if i%freq != 0:
                continue
            pos = []
            symbol = []
            f = []
            lines = structure.split("\n")
            k = 0
            nAtom = 0
            for line in lines:
                words = line.split()
                pos.append([float(words[0]),float(words[1]),float(words[2])])
                f.append([float(words[3]),float(words[4]),float(words[5])])
                if(nElement[k]>nAtom):
                    nAtom += 1
                else:
                    nAtom = 0
                    k += 1
                symbol.append(elements[k])
            self.data["positions"].append(pos)
            self.data["symbols"].append(symbol)
            self.data["forces"].append(f) 
            self.data["cells"].append(latVec)
            self.data["energies"].append(float(energies[i]))
            self.nConfigs += 1
                

    def save_npz(self, saveSTR):
        '''
        save the dataset to .npz file.
        '''
        saveData = {}
        for list in self.data.keys():
            saveData[list] = np.array(self.data[list])
        np.savez_compressed(saveSTR, saveData)

    def save_extxyz(self, saveSTR):
        '''
        save the dataset to .extxyz file.
        Copied from github.
        '''
        for idx in range(self.nConfigs):
            curr_atoms = Atoms(
            # set atomic positions
                positions=self.data["positions"][idx],
            # set cell in case it exists
                cell=self.data["cells"][idx],
            # set chemical symbols / species
                symbols=self.data["symbols"][idx], 
            # assuming data with periodic boundary conditions, set to false for e.g. for molecules in vacuum
                pbc=True
            )
            # set calculator to assign targets
            calculator = SinglePointCalculator(curr_atoms, energy=self.data["energies"][idx], forces=self.data["forces"][idx])
            curr_atoms.calc = calculator
            asewrite(saveSTR, curr_atoms, format='extxyz', append=True)